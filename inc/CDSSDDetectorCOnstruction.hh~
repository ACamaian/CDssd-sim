#ifndef DEMODetectorConstruction_h
#define DEMODetectorConstruction_h 1

#include "G4VUserDetectorConstruction.hh"
#include "G4ThreeVector.hh"

#include "DEMOFieldSetup.hh"
#include "DEMODSSDSD.hh"

#include "globals.hh"

#include "G4NistManager.hh"
#include "G4Material.hh"
#include "G4SDManager.hh"

#include "G4UserLimits.hh"

class G4Box;
class G4Tubs;
class G4LogicalVolume;
class G4VPhysicalVolume;
class G4Material;
class G4LogicalVolume;
class G4VPhysicalVolume;
class G4AssemblyVolume;

class DEMODetectorMessenger;

class DEMOGasSD;


class DEMOGasDetectorConstruction;
class DEMODSSDDetectorConstruction;

class DEMODetectorConstruction : public G4VUserDetectorConstruction {
private:

  G4NistManager *nistman; //Pointer to NIST Material Manager 
  
  G4SDManager* SDman;         ///< Pointer to gas sensitive detector manager
  DEMOGasSD* gasSD;          ///< Pointer to gas sensitive detector 
  DEMODSSDSD* dssdSD[64];          ///< Pointer to dssd sensitive detector 
    
  G4UserLimits* limit;

  G4Box* solidWorld;

  G4LogicalVolume* worldLog;      ///< Pointer to logic world
  G4LogicalVolume* chamberLog;    ///< Pointer to logic chamber
  G4LogicalVolume* AlplateLog;    ///< Pointer to logic aluminium plate
  G4LogicalVolume* SupportLog;    ///< Pointer to logic CageField support
  G4LogicalVolume* gasLog_dead;    ///< Pointer to logic CageField suppo
  G4LogicalVolume* gasLog_dead_down;    ///< Pointer to logic CageField suppo

  G4VPhysicalVolume* worldPhys;   ///< Pointer to physical world
  G4VPhysicalVolume* chamberPhys; ///< Pointer to physical chamber
  G4VPhysicalVolume* AlplatePhys; ///< Pointer to physical Al plate
  G4VPhysicalVolume* SupportPhys; ///< Pointer to physical CageField support
  G4VPhysicalVolume* gasPhys_dead;    ///< Pointer to logic CageField suppo

  G4Material* mediumMaterial;    ///< Pointer to the medium material
  G4Material* defaultMaterial;   ///< Pointer to the default material
  G4Material* supportMaterial;   ///< Pointer to the support material
  G4Material* chamberMaterial;   ///< Pointer to the chamber material
  G4Material* windowMaterial;    ///< Pointer to the window material
  G4Material* gasDeadMaterial;    ///< Pointer to the window material
  
  G4double worldSizeX;    ///< World X half-lengths (always centered at (0,0,0))
  G4double worldSizeY;    ///< World Y half-lengths (always centered at (0,0,0))
  G4double worldSizeZ;    ///< World Z half-lengths (always centered at (0,0,0))

  G4double chamberSizeX;  ///< Chamber X half-lengths
  G4double chamberSizeY;  ///< Chamber Y half-lengths
  G4double chamberSizeZ;  ///< Chamber Z half-lengths

  G4double chamberCenterX;  ///< Chamber X Center
  G4double chamberCenterY;  ///< Chamber Y Center
  G4double chamberCenterZ;  ///< Chamber Z Center

  G4double window_thickness;
  G4double window_radius;

  G4double front_gap;
  G4double side_gap;
  G4double back_gap;

  G4double gasStepMax;

  DEMOGasDetectorConstruction* gasDet;          ///< Pointer to target constructor 
  DEMODSSDDetectorConstruction* dssdDet;          ///< Pointer to target constructor

  DEMODetectorMessenger* detectorMessenger;  ///< Pointer to the Messenger

  void DefineMaterials();
  G4VPhysicalVolume* ConstructEmptyWorld();
  G4VPhysicalVolume* ConstructActarTPCDEMO();

public:
  DEMODetectorConstruction();
  ~DEMODetectorConstruction() override;

  G4VPhysicalVolume* Construct() override;

  void ConstructSDandField() override;

  void SetWorldSizeX(G4double val){worldSizeX = val;}
  void SetWorldSizeY(G4double val){worldSizeY = val;}
  void SetWorldSizeZ(G4double val){worldSizeZ = val;}

  void SetChamberSizeX(G4double val){chamberSizeX = val;}
  void SetChamberSizeY(G4double val){chamberSizeY = val;}
  void SetChamberSizeZ(G4double val){chamberSizeZ = val;}

  void SetChamberCenterX(G4double val){chamberCenterX = val;}
  void SetChamberCenterY(G4double val){chamberCenterY = val;}
  void SetChamberCenterZ(G4double val){chamberCenterZ = val;}

  void SetMediumMaterial(G4String); 
  void SetGasDeadMaterial(G4String);
  void SetDefaultMaterial(G4String);
  void SetSupportMaterial(G4String);
  void SetChamberMaterial(G4String);

  void SetUpdateChamberMaterial(G4Material*);
  void SetUpdateGasDeadMaterial(G4Material*);

  void SetGasStepMax(double ss){gasStepMax = ss;}

  void SetWindowMaterial (G4String val);
  void SetWindowThickness (G4double val) {window_thickness = val;}
  G4double GetWindowThickness () {return window_thickness;}
  void SetWindowRadius (G4double val) {window_radius = val;}
  G4double GetWindowRadius () {return window_radius;}
  
  DEMOGasSD* GetGasSD(void){return gasSD;}

  DEMODetectorMessenger* GetDetectorMessenger(){return detectorMessenger;};

  G4LogicalVolume* GetWorldLogicalVolume(){return worldLog;}
  G4VPhysicalVolume* GetWorldPhysicalVolume(){return worldPhys;}
  G4LogicalVolume* GetChamberLogicalVolume(){return chamberLog;}
  G4VPhysicalVolume* GetChamberPhysicalVolume(){return chamberPhys;}

  G4double GetWorldSizeX(void){return worldSizeX;}
  G4double GetWorldSizeY(void){return worldSizeY;}
  G4double GetWorldSizeZ(void){return worldSizeZ;}

  G4double GetChamberSizeX(void){return chamberSizeX;}
  G4double GetChamberSizeY(void){return chamberSizeY;}
  G4double GetChamberSizeZ(void){return chamberSizeZ;}

  G4double GetChamberCenterX(void){return chamberCenterX;}
  G4double GetChamberCenterY(void){return chamberCenterY;}
  G4double GetChamberCenterZ(void){return chamberCenterZ;}

  G4Material* GetMediumMaterial() {return mediumMaterial;};
  G4Material* GetDefaultMaterial() {return defaultMaterial;};
  G4Material* GetSupportMaterial() {return supportMaterial;};
  G4Material* GetChamberMaterial() {return chamberMaterial;};

  DEMOGasDetectorConstruction* GetGasDetector() {return gasDet;}

  void UpdateGeometry();
    
};
#endif
