//////////////////////////////////////////////////////////////////
/// \class DEMOGasDetectorMessenger
/// Messenger of the Gas ACTAR detector
/////////////////////////////////////////////////////////////////

#include "DEMOGasDetectorMessenger.hh"

#include "G4RunManager.hh"

#include "DEMODetectorConstruction.hh"
#include "DEMOGasDetectorConstruction.hh"
//#include "DEMOPrimaryGeneratorAction.hh"

#include "G4UIcommand.hh"
#include "G4UIdirectory.hh"
#include "G4UIcmdWithAString.hh"
#include "G4UIcmdWithAnInteger.hh"
#include "G4UIcmdWithADoubleAndUnit.hh"
#include "G4UIcmdWith3VectorAndUnit.hh"
#include "G4UIcmdWithoutParameter.hh"
#include "G4Tokenizer.hh"


//////////////////////////////////////////////////////////////////
/// Constructor
/// command included in this AnalysisMessenger:
/// - /DEMO/gas/setGasMat
/// - /DEMO/gas/setGasPressure
/// - /DEMO/gas/setGasTemperature
/// - /DEMO/gas/mixture/
/// - /DEMO/gas/mixture/GasMixture
/// - /DEMO/gas/mixture/setGasMix
DEMOGasDetectorMessenger::
DEMOGasDetectorMessenger(DEMOGasDetectorConstruction* DEMOGasDet)
  :DEMOGasDetector(DEMOGasDet){

  //if(DEMODetector)    ; //avoid compiler warning message 

  gasDir = new G4UIdirectory("/DEMO/gas/");
  gasDir->SetGuidance("gas control");

  gasMaterCmd = new G4UIcmdWithAString("/DEMO/gas/setGasMat",this);
  gasMaterCmd->SetGuidance("Select Material of the Gas (for the Gas box and the Chamber).");
  gasMaterCmd->SetParameterName("gasMat",false);
  gasMaterCmd->SetDefaultValue("G4_He");
  gasMaterCmd->AvailableForStates(G4State_PreInit,G4State_Idle);

  gasPresCmd = new G4UIcmdWithADoubleAndUnit("/DEMO/gas/setGasPressure",this);
  gasPresCmd->SetGuidance("Select the Gas Pressure (for the Gas box and the Chamber).");
  gasPresCmd->SetParameterName("gasPressure",false);
  gasPresCmd->SetRange("gasPressure>=0.");
  gasPresCmd->SetUnitCategory("Pressure");
  gasPresCmd->SetDefaultUnit("bar");
  gasPresCmd->SetDefaultValue(1.01325);
  gasPresCmd->AvailableForStates(G4State_PreInit,G4State_Idle);

  gasTempCmd = new G4UIcmdWithADoubleAndUnit("/DEMO/gas/setGasTemperature",this);
  gasTempCmd->SetGuidance("Select the Gas Temperature (for the Gas box and the Chamber).");
  gasTempCmd->SetParameterName("gasTemperature",false);
  gasTempCmd->SetRange("gasTemperature>=0.");
  gasTempCmd->SetUnitCategory("Temperature");
  gasTempCmd->SetDefaultUnit("kelvin");
  gasTempCmd->SetDefaultValue(293.15);
  gasTempCmd->AvailableForStates(G4State_PreInit,G4State_Idle);
  
  gasDirMix = new G4UIdirectory("/DEMO/gas/mixture/");
  gasDirMix->SetGuidance("gas mixture control");

  gasMixtureFlagCmd = new G4UIcmdWithAnInteger("/DEMO/gas/mixture/GasMixture",this);
  gasMixtureFlagCmd->SetGuidance("Set a Gas Mixture with N number of elements (default 0).");
  gasMixtureFlagCmd->SetGuidance("  Choice : 0 (default) to 10");
  //gasMixtureFlagCmd->SetParameterName("GasNumber",false);
  gasMixtureFlagCmd->SetParameterName("N",true,true);
  gasMixtureFlagCmd->SetRange("N>0");
  gasMixtureFlagCmd->SetDefaultValue(2);
  //gasMixtureFlagCmd->SetCandidates("2 3 4 5 6 7 8 9 10");
  //gasMixtureFlagCmd->AvailableForStates(G4State_PreInit,G4State_Idle);

  gasMixtureCmd = new G4UIcommand("/DEMO/gas/mixture/setGasMix",this);
  gasMixtureCmd->SetGuidance("Set a Gas Mixture (for the Gas box and the Chamber).");
  gasMixtureCmd->SetGuidance("[usage] /DEMO/gas/setGasMix GasNum GasMat GasRatio");
  gasMixtureCmd->SetGuidance("        GasNum:(int) GasNumber (from 1 to 7)");
  gasMixtureCmd->SetGuidance("        GasMat:(string) Gas Material from the list");
  gasMixtureCmd->SetGuidance("        GasRatio:(double) Gas Ratio in Mixture (from 0 to 1)");

  G4UIparameter* gasMixtureParam;
  gasMixtureParam = new G4UIparameter("GasNum",'i',false);
  gasMixtureParam->SetDefaultValue("1");
  gasMixtureParam->SetParameterRange("GasNum>0");
  gasMixtureParam->SetParameterRange("GasNum<10");
  gasMixtureCmd->SetParameter(gasMixtureParam);
  gasMixtureParam = new G4UIparameter("GasMat",'s',false);
  gasMixtureParam->SetDefaultValue("D2");
  gasMixtureParam->SetParameterCandidates("H2 D2 He Ar CF4 CH4 iC4H10");
  gasMixtureCmd->SetParameter(gasMixtureParam);
  gasMixtureParam = new G4UIparameter("GasRatio",'d',false);
  gasMixtureParam->SetDefaultValue("0");
  gasMixtureParam->SetParameterRange("GasRatio>=0.");
  gasMixtureParam->SetParameterRange("GasRatio<=1.");
  gasMixtureCmd->SetParameter(gasMixtureParam);
}

//////////////////////////////////////////////////////////////////
/// Destructor
DEMOGasDetectorMessenger::~DEMOGasDetectorMessenger() {
  delete gasDir;
  delete gasDirMix;
  delete gasMaterCmd;
  delete gasMixtureFlagCmd;
  delete gasMixtureCmd;
  delete gasPresCmd;
  delete gasTempCmd;
}

//////////////////////////////////////////////////////////////////
/// Setting the new values and connecting to actions
//void DEMOGasDetectorMessenger::SetNewValue(G4UIcommand* command,
//					       G4String newValue) {
//
//}

//////////////////////////////////////////////////////////////////
/// Selection of the mixture gases.
void DEMOGasDetectorMessenger::GasMixtureCommand(G4String newValues){

  G4Tokenizer next( newValues );
  // check argument
  fGasNumber = StoI(next());
  fGasMaterial = next();
  fGasRatio = StoD(next());

  //G4cout << " fGasNumber "<<fGasNumber<< " fGasMaterial "<<fGasMaterial<< " fGasRatio "<<fGasRatio<< G4endl;

  DEMOGasDetector->SetGasMixMaterial(fGasNumber,fGasMaterial,fGasRatio);
}


//////////////////////////////////////////////////////////////////
/// Setting the new values and connecting to actions
void DEMOGasDetectorMessenger::SetNewValue(G4UIcommand* command,
                                               G4String newValue) {

  if(command == gasMaterCmd) {   
    DEMOGasDetector->SetGasMaterial(newValue);
  }
  
  if(command == gasMixtureFlagCmd)
    DEMOGasDetector->SetGasMixture(gasMixtureFlagCmd->GetNewIntValue(newValue));
  
  if(command == gasMixtureCmd)
    GasMixtureCommand(newValue);
  
  if(command == gasTempCmd)
    DEMOGasDetector->SetGasTemperature(gasTempCmd->GetNewDoubleValue(newValue));
  
  if(command == gasPresCmd)
    DEMOGasDetector->SetGasPressure(gasPresCmd->GetNewDoubleValue(newValue));
  
  
}

