/// \file DEMOEventAction.cc
/// \brief Implementation of the DEMOEventAction class

#include "DEMOEventAction.hh"
#include "DEMOGasSD.hh"
#include "DEMOGasGeantHit.hh"

#include "DEMODSSDSD.hh"
#include "DEMODSSDGeantHit.hh"

#include "DEMOAnalysis.hh"

#include "G4RunManager.hh"

#include "G4Event.hh"
#include "G4SDManager.hh"
#include "G4HCofThisEvent.hh"
#include "G4UnitsTable.hh"

#include <iomanip>

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DEMOEventAction::DEMOEventAction()
: G4UserEventAction()
{} 

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DEMOEventAction::~DEMOEventAction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DEMOEventAction::BeginOfEventAction(const G4Event* evt)
{    
 G4int evtNb = evt->GetEventID();

 //G4cout << evt->GetNumberOfPrimaryVertex() << G4endl;
 SetVertexZ0(evt->GetPrimaryVertex(1)->GetZ0());

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DEMOEventAction::EndOfEventAction(const G4Event* evt)
{   
   // get analysis manager
  auto analysisManager = G4AnalysisManager::Instance();
  
  
  etot_dep.clear();
  volume.clear();
  pdg2.clear();
  eventid.clear();
  parentid2.clear();
  e02.clear();

  G4double etot_temp=0;
  G4double e0_temp=0;
  G4int volume_temp=-1;
  G4int pdg2_temp=-1;
  G4int parent_temp=-1;
  //-----------
  //GAS
  //-----------

  // Get hits collections IDs (only once)
  if (fgasHCID == -1) {
    fgasHCID = G4SDManager::GetSDMpointer()->GetCollectionID("gasCollection");
  }
  // Get hits collections and loop on it
  auto gasHC = GetHitsCollectionGas(fgasHCID, evt);
  G4int gasNentries = gasHC->entries();   
  trackid.clear();
  parentid.clear();
  pdg.clear();
  
  xpos.clear();
  ypos.clear();
  zpos.clear();
  edeppos.clear();
  e0pos.clear();
  
  bool newtrack=false;
  int temp_tID=-99;


  for(int ii=0; ii<gasNentries; ii++){
    auto gasHit = (*gasHC)[ii];    //how access hit from a hit collection

    G4double xx = gasHit->GetPostPos().x();
    G4double yy = gasHit->GetPostPos().y();
    G4double zz = gasHit->GetPostPos().z();
    
    if(gasHit->GetTrackID()==temp_tID) newtrack=false;
    else {
      if(temp_tID!=99){
	//--Once I finished the hits for a given trackID I store the info in the event-like vector
	etot_dep.push_back(etot_temp);
	volume.push_back(volume_temp); 
	track.push_back(temp_tID);
	pdg2.push_back(pdg2_temp);
	parentid2.push_back(parent_temp);
	e02.push_back(e0_temp); 
	eventid.push_back(evt->GetEventID());
      }
      newtrack=true;
      etot_temp=0;
    }

    if(newtrack==true){ //for a new trakc I store the pre and post 
      G4double xx0 = gasHit->GetPrePos().x();
      G4double yy0 = gasHit->GetPrePos().y();
      G4double zz0 = gasHit->GetPrePos().z();
      
      zpos.push_back(zz0);
      ypos.push_back(yy0);
      xpos.push_back(xx0);
    
      trackid.push_back(gasHit->GetTrackID());
      parentid.push_back(gasHit->GetParentID());
      pdg.push_back(gasHit->GetParticleID());
      edeppos.push_back(0.); //The energy associated to the pre-step is set by hand to ZERO to avoid an overcount
      e0pos.push_back(gasHit->GetE0()); //E0 is not zero only for the first hit. 

      //--
      ////for the event like ntupla
      //--
      e0_temp=gasHit->GetE0(); 
      volume_temp=0;
      etot_temp+=gasHit->GetEdep(); 
      pdg2_temp=gasHit->GetParticleID();
      parent_temp=gasHit->GetParentID();

      //---
      

      zpos.push_back(zz);
      ypos.push_back(yy);
      xpos.push_back(xx);

      trackid.push_back(gasHit->GetTrackID());
      parentid.push_back(gasHit->GetParentID());
      pdg.push_back(gasHit->GetParticleID());
      edeppos.push_back(gasHit->GetEdep());
      e0pos.push_back(0);
    

      temp_tID = gasHit->GetTrackID();
    }
    else{ //then only the post
      zpos.push_back(zz);
      ypos.push_back(yy);
      xpos.push_back(xx);
      
      trackid.push_back(gasHit->GetTrackID());
      parentid.push_back(gasHit->GetParentID());
      pdg.push_back(gasHit->GetParticleID());
      edeppos.push_back(gasHit->GetEdep());
      e0pos.push_back(0);



      //--
      ////for the event like ntupla
      //--
      etot_temp+=gasHit->GetEdep();
      //--
    }

  
    //the last one need tobe saved by hand
    if(ii==gasNentries-1){
      //--Once I finished the hits for a given trackID I store the info in the event-like vector
      etot_dep.push_back(etot_temp);
      volume.push_back(volume_temp);
      track.push_back(temp_tID);
      pdg2.push_back(pdg2_temp);
      parentid2.push_back(parent_temp);
      e02.push_back(e0_temp);
      eventid.push_back(evt->GetEventID());
      
    }
    
  }

  


  //-----------
  //DSSD
  //-----------

  etot_temp=0; e0_temp=0; volume_temp=-1; pdg2_temp=-1; parent_temp=-1; temp_tID=-99;newtrack=false;
  // // Get hits collections IDs (only once)

    for(int istrip=0; istrip<64; istrip++){
      char stripname[50];
      if(istrip<32)sprintf(stripname,"dssdCollection_stripPhys_front_%d",istrip+1);
      if(istrip>=32)sprintf(stripname,"dssdCollection_stripPhys_back_%d",istrip-31);
    
      fdssdHCID = G4SDManager::GetSDMpointer()->GetCollectionID(stripname);
          
      // Get hits collections and loop on it
      auto stripHC = GetHitsCollectionDssd(fdssdHCID, evt); //each collection is a strip

      G4int stripNentries = stripHC->entries();   
      if(stripNentries<=0) continue;
      
      for(int ii=0; ii<stripNentries; ii++){
	auto stripHit = (*stripHC)[ii];    //how access hit from a hit collection
	
	
	if(stripHit->GetTrackID()==temp_tID) newtrack=false;
	else {
	  if(temp_tID!=-99){
	    //--Once I finished the hits for a given trackID I store the info in the event-like vector
	    etot_dep.push_back(etot_temp);
	    volume.push_back(volume_temp);
	    track.push_back(temp_tID);
	    pdg2.push_back(pdg2_temp);
	    parentid2.push_back(parent_temp);
	    e02.push_back(e0_temp);
	    eventid.push_back(evt->GetEventID());
	    
	  }
	  newtrack=true;
	  etot_temp=0;
	}
	
	//if(stripHit->GetTrackID()<3)G4cout << istrip << " " << ii << " " << stripHit->GetParticleID() << " " << stripHit->GetCharge() << " " <<stripHit->GetParentID() << " " << e0_temp << " " << etot_temp << " " << newtrack <<  " " << stripHit->GetTrackID() << G4endl;
	
	if(newtrack==true){
	  //--
	  ////for the event like ntupla
	  //--
	  e0_temp=stripHit->GetE0(); 
	  volume_temp= istrip+1;
	  etot_temp+=stripHit->GetEdep(); 
	  pdg2_temp=stripHit->GetParticleID();
	  parent_temp=stripHit->GetParentID();
	  //---

	  temp_tID = stripHit->GetTrackID();
	}
	else{
	  //--
	  ////for the event like ntupla
	  //--
	  etot_temp+=stripHit->GetEdep();
	  //--
	}

	//the last one need tobe saved by hand
	if(ii==stripNentries-1){
	    //--Once I finished the hits for a given trackID I store the info in the event-like vector
	    etot_dep.push_back(etot_temp);
	    volume.push_back(volume_temp);
	    track.push_back(temp_tID);
	    pdg2.push_back(pdg2_temp);
	    parentid2.push_back(parent_temp);
	    e02.push_back(e0_temp);
	    eventid.push_back(evt->GetEventID());
	    
	  }
      }
    }

    analysisManager->AddNtupleRow(0);
    analysisManager->AddNtupleRow(1);
    
    auto eventID = evt->GetEventID();
    auto printModulo = G4RunManager::GetRunManager()->GetPrintProgress();
    if ( ( printModulo > 0 ) && ( eventID % printModulo == 0 ) ) {
      G4cout << "---> End of event: " << eventID << G4endl;
      
    }
    
    
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......


DEMODSSDGeantHitsCollection* DEMOEventAction::GetHitsCollectionDssd(G4int hcID, const G4Event* event) const {
  
  auto hitsCollection  = static_cast<DEMODSSDGeantHitsCollection*>(event->GetHCofThisEvent()->GetHC(hcID));

  if ( ! hitsCollection ) {
    G4ExceptionDescription msg;
    msg << "Cannot access hitsCollection ID " << hcID;
    G4Exception("EventAction::GetHitsCollection()", "MyCode0003", FatalException, msg);
  }

  return hitsCollection;
}



DEMOGasGeantHitsCollection* DEMOEventAction::GetHitsCollectionGas(G4int hcID, const G4Event* event) const {
  
  auto hitsCollection  = static_cast<DEMOGasGeantHitsCollection*>(event->GetHCofThisEvent()->GetHC(hcID));

  if ( ! hitsCollection ) {
    G4ExceptionDescription msg;
    msg << "Cannot access hitsCollection ID " << hcID;
    G4Exception("EventAction::GetHitsCollection()", "MyCode0003", FatalException, msg);
  }

  return hitsCollection;
}
