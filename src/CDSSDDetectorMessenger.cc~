//////////////////////////////////////////////////////////////////
/// \class DEMODetectorMessenger
/// Messenger for the detector construction
/////////////////////////////////////////////////////////////////

#include "DEMODetectorMessenger.hh"
#include "DEMODetectorConstruction.hh"
#include "G4UIdirectory.hh"
#include "G4UIcmdWithAString.hh"
#include "G4UIcmdWithAnInteger.hh"
#include "G4UIcmdWithADouble.hh"
#include "G4UIcmdWithADoubleAndUnit.hh"
#include "G4UIcmdWith3VectorAndUnit.hh"
#include "G4UIcmdWith3Vector.hh"
#include "G4UIcmdWithoutParameter.hh"

//////////////////////////////////////////////////////////////////
/// Constructor
/// command included in this AnalysisMessenger:
/// - /DEMO/det/setWindowMat
/// - /DEMO/det/setWindowRadius
/// - /DEMO/det/setWindowThickness
/// - /DEMO/det/setGasStepMax
DEMODetectorMessenger::
DEMODetectorMessenger(DEMODetectorConstruction* DEMODet)
  :DEMODetector(DEMODet) {

  DEMODir = new G4UIdirectory("/DEMO/");
  DEMODir->SetGuidance("UI commands of DEMO program");

  detDir = new G4UIdirectory("/DEMO/det/");
  detDir->SetGuidance("Detector control");

  windowRadiusCmd = new G4UIcmdWithADoubleAndUnit("/DEMO/det/setWindowRadius",this);
  windowRadiusCmd->SetGuidance("Select the Radius of the beam entrance");
  windowRadiusCmd->SetParameterName("windowRadius",false);
  windowRadiusCmd->SetUnitCategory("Length");
  windowRadiusCmd->AvailableForStates(G4State_PreInit,G4State_Idle);

  windowThicknessCmd = new G4UIcmdWithADoubleAndUnit("/DEMO/det/setWindowThickness",this);
  windowThicknessCmd->SetGuidance("Select the Thickness of the beam entrance");
  windowThicknessCmd->SetParameterName("windowThickness",false);
  windowThicknessCmd->SetUnitCategory("Length");
  windowThicknessCmd->AvailableForStates(G4State_PreInit,G4State_Idle);

  
  windowMaterialCmd = new G4UIcmdWithAString("/DEMO/det/setWindowMat",this);
  windowMaterialCmd->SetGuidance("Select Material outside the Chamber.");
  windowMaterialCmd->SetParameterName("windowMat",false);
  windowMaterialCmd->SetDefaultValue("G4_MYLAR");
  windowMaterialCmd->AvailableForStates(G4State_PreInit,G4State_Idle);

  gasStepMaxCmd = new G4UIcmdWithADoubleAndUnit("/DEMO/det/setGasStepMax",this);
  gasStepMaxCmd->SetGuidance("Set the Maximum allowed Step in the active gas");
  gasStepMaxCmd->SetParameterName("GasStepMax",false);
  gasStepMaxCmd->SetUnitCategory("Length");
  gasStepMaxCmd->AvailableForStates(G4State_PreInit,G4State_Idle);

}

//////////////////////////////////////////////////////////////////
/// Destructor
DEMODetectorMessenger::~DEMODetectorMessenger() {
  delete DEMODir;
  delete detDir;

  delete windowMaterialCmd;
  delete windowRadiusCmd;
  delete windowThicknessCmd;

  delete gasStepMaxCmd;
  
}


//////////////////////////////////////////////////////////////////
/// Setting the values using the ActarSimDetectorConstruction interface
void DEMODetectorMessenger::SetNewValue(G4UIcommand* command,
					    G4String newValue) {
  
  if(command == windowRadiusCmd)
    DEMODetector->SetWindowRadius(windowRadiusCmd->GetNewDoubleValue(newValue));

  if(command == windowThicknessCmd)
    DEMODetector->SetWindowThickness(windowThicknessCmd->GetNewDoubleValue(newValue));

  if(command == windowMaterialCmd)
    DEMODetector->SetWindowMaterial(newValue);

   if(command == gasStepMaxCmd)
     DEMODetector->SetGasStepMax(gasStepMaxCmd->GetNewDoubleValue(newValue));

     

}
