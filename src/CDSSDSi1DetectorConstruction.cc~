//////////////////////////////////////////////////////////////////
/// \class ActarSimGasDetectorConstruction
/// Gas volume detector description
/////////////////////////////////////////////////////////////////

#include "DEMOGasDetectorConstruction.hh"
#include "DEMODetectorConstruction.hh"
#include "DEMOGasDetectorMessenger.hh"
#include "DEMOGasSD.hh"
#include "DEMOFieldSetup.hh"

#include "G4Material.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4Cons.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4RotationMatrix.hh"
#include "G4VisAttributes.hh"
#include "G4Colour.hh"
#include "G4RunManager.hh"
#include "G4Transform3D.hh"

#include "G4Region.hh"

#include "globals.hh"

#include "G4PhysicalConstants.hh"
#include "G4SystemOfUnits.hh"

//////////////////////////////////////////////////////////////////
/// Constructor
/// Sets the material and the pointer to the Messenger
DEMOGasDetectorConstruction::
DEMOGasDetectorConstruction(DEMODetectorConstruction* det)
  :	detConstruction(det){

  G4cout << "DEMO GAS Detector Construction" << G4endl;

  //Intialize the Nistmanager
  nistman = G4NistManager::Instance();

  SetGasPressure(0.200*bar);
  SetGasTemperature(293.15*kelvin);

  //DefineGas();
  SetGasMaterial("He");

   //gas Box size: (64*170*128)mm
  gasBoxSizeX = 32.*mm; //gap_x 5mm
  gasBoxSizeY = 85.*mm; 
  gasBoxSizeZ = 64.*mm; //gap_z 5mm
  //Pad Size : GasBox height from chamber floor = 4.54mm
  gasBoxCenterX = 0.*mm;
  gasBoxCenterY = -105.0+gasBoxSizeY+4.54*mm; // gasBox shifted to be at the bottom of chamber and above the pads
  gasBoxCenterZ = 0.*mm;

  // create commands for interactive definition of the calorimeter
  gasMessenger = new DEMOGasDetectorMessenger(this);
  
  //electric fields
  emField = new DEMOFieldSetup();
}

//////////////////////////////////////////////////////////////////
/// Destructor
DEMOGasDetectorConstruction::~DEMOGasDetectorConstruction(){
  if (gasMessenger !=NULL ) delete gasMessenger;
  if (emField != NULL) delete emField;
  if (nistman != NULL) delete nistman;
  if (detConstruction != NULL) delete detConstruction;
  if( gasLog != NULL) delete gasLog;
  
}

//////////////////////////////////////////////////////////////////
/// Wrap for the construction functions within the TOF
G4VPhysicalVolume* DEMOGasDetectorConstruction::Construct(G4LogicalVolume* chamberLog) {
  return ConstructGas(chamberLog);
}

//////////////////////////////////////////////////////////////////
/// Constructs the Gas volume detector elements
G4VPhysicalVolume* DEMOGasDetectorConstruction::ConstructGas(G4LogicalVolume* chamberLog) {
 
  
  G4VPhysicalVolume* gasPhys;                //pointer to physic gas

  G4cout << "##################################################################" << G4endl
	 << "######  DEMODetectorConstruction::ConstructActarDEMONSTRATOR()  #######" << G4endl
	 << " Box-like gas geometry." << G4endl;
  G4cout << " Box Parameters: " << G4endl
	 << " gasBoxSizeX = " <<  gasBoxSizeX/mm
	 << " mm,  gasBoxSizeY = " <<  gasBoxSizeY/mm
	 << " mm,  gasBoxSizeZ = " <<  gasBoxSizeZ/mm << " mm" << G4endl
	 << " gasBoxCenterX = " <<  gasBoxCenterX/mm
	 << " mm,  gasBoxCenterY = " <<  gasBoxCenterY/mm
	 << " mm,  gasBoxCenterZ = " <<  gasBoxCenterZ << " mm" << G4endl
	 << " gasMaterial: " <<  gasMaterial << G4endl;
  G4cout << "##################################################################"<< G4endl;


  //gas Box size: (64*170*128)mm
  gasBoxSizeX = 32.*mm; //gap_x 5mm
  gasBoxSizeY = 85.*mm; 
  gasBoxSizeZ = 64.*mm; //gap_z 5mm
  //Pad Size : GasBox height from chamber floor = 4.54mm
  gasBoxCenterX = 0.*mm;
  gasBoxCenterY = -105.0+gasBoxSizeY+4.54*mm;// gasBox shifted to be at the bottom of chamber and above the pads
  gasBoxCenterZ = 0.*mm;

  G4Box* gasBox;
  gasBox = new G4Box("gasBox",gasBoxSizeX,gasBoxSizeY,gasBoxSizeZ);  
  gasLog = new G4LogicalVolume(gasBox,gasMaterial,"gasLog");
  gasPhys = new G4PVPlacement(0, G4ThreeVector(gasBoxCenterX,gasBoxCenterY,gasBoxCenterZ),gasLog,"gasPhys",chamberLog,false,0,true);

   
  //------
  //EM Fields
  //-------
  G4bool allLocal = true;
  gasLog->SetFieldManager(emField->GetLocalFieldManager(), allLocal);
  
  //------------------------------------------------------------------
  // Visualization attributes
  //------------------------------------------------------------------
  //worldLog->SetVisAttributes (G4VisAttributes::Invisible);
  G4VisAttributes* gasVisAtt = new G4VisAttributes(G4Colour(1.0,1.0,0.0));
 
  gasVisAtt->SetVisibility(true);
  gasLog->SetVisAttributes(gasVisAtt);

  return gasPhys;
}

//////////////////////////////////////////////////////////////////
/// Sets the material the gas is made of
///
/// STP used are P = 1atm and T = 20ÂºC
void DEMOGasDetectorConstruction::SetGasMaterial (G4String mat) {


  G4double density;
  G4double a;  // atomic mass
  G4double z;  // atomic number
  G4double n;

  //Gas Mix
  //const G4int NGasMix=NumberOfGasMix;
  G4int ncomponents, natoms;
  G4double fractionmass, abundance;
  
  
  G4Isotope* iso_H2= new G4Isotope("iso_H2",z=1,n=2, a=2.0140*g/mole);
  G4Element* ele_D= new G4Element("Deuterium","D" , ncomponents=1);
  ele_D->AddIsotope(iso_H2, abundance = 100.*perCent);

  //Gas Pressure & Temperature
  G4double pressure=GetGasPressure();
  G4double temperature=GetGasTemperature();
  G4double Vm=0.08206*temperature*atmosphere/(pressure*kelvin);
  
  //D2 (default  0.16746*mg/cm3 STP)
  //density	=(0.16746*293.15*kelvin*pressure)/(1.01325*bar*temperature)*mg/cm3;
  density	= (2*2.0140/Vm)*mg/cm3;

  G4Material* D2 =  new G4Material("D2", density, ncomponents=2, kStateGas, temperature, pressure);
  D2->AddElement(ele_D, natoms=1);
  D2->AddElement(ele_D, natoms=1);

  
  //He (default  0.16642*mg/cm3 STP)
  //density     =(0.16642*293.15*kelvin*pressure)/(1.01325*bar*temperature)*mg/cm3;
  density       = (4.0026/Vm)*mg/cm3;
  G4Material* He =  new G4Material("He", z=2, a=4.0026*g/mole, density, kStateGas, temperature, pressure);
 

  if(mat=="D2"){
    gasMaterial = D2;
  }
  else if(mat=="He"){
    gasMaterial = He;
  }
  else if(mat=="GasMix"){

    density = 0*mg/cm3;
    G4double FractionMass[10];
    G4Material *pttoMaterial[10];

    for(G4int i=0;i<NumberOfGasMix;i++) {
      if(gasMixMaterial[i]=="D2")pttoMaterial[i]=D2;
      else if(gasMixMaterial[i]=="He")pttoMaterial[i]=He;
      

      density+= ((gasMixRatio[i]*pttoMaterial[i]->GetDensity()));
      //G4cout <<" Gas Mat "<<gasMixMaterial[i]<<" Gas Ratio "<<gasMixRatio[i]<<" Mat Density "<<gasMixRatio[i]*pttoMaterial[i]->GetDensity()*cm3/mg<< G4endl;
      //DensitySum+=pttoMaterial[i]->GetDensity();

    }

    for(G4int i=0;i<NumberOfGasMix;i++) {
      FractionMass[i]=((gasMixRatio[i]*pttoMaterial[i]->GetDensity()))/density;
    }

    G4Material* GasMix =
      new G4Material("GasMix", density, ncomponents=NumberOfGasMix, kStateGas, temperature, pressure);

    for(G4int i=0;i<NumberOfGasMix;i++) {
      GasMix->AddMaterial( pttoMaterial[i], fractionmass = FractionMass[i] ) ;
    }

    gasMaterial = GasMix;
  }
}

