//////////////////////////////////////////////////////////////////
/// \class DEMOGasSD
/// SD for the gas volume in the detector
/////////////////////////////////////////////////////////////////

#include "DEMOGasSD.hh"

#include "G4HCofThisEvent.hh"
#include "G4Step.hh"
#include "G4VProcess.hh"
#include "G4ThreeVector.hh"
#include "G4SDManager.hh"
#include "G4ios.hh"
#include "G4UnitsTable.hh"

#include "G4VPhysicalVolume.hh"
#include "G4TouchableHistory.hh"
#include "G4VTouchable.hh"

#include "G4PhysicalConstants.hh"
#include "G4SystemOfUnits.hh"

//////////////////////////////////////////////////////////////////
/// Constructor
DEMOGasSD::DEMOGasSD(G4String name):G4VSensitiveDetector(name){

  G4cout << "Creating SD with name: " << name << G4endl;
  G4String HCname;
  collectionName.insert(HCname="gasCollection");
}

//////////////////////////////////////////////////////////////////
/// Destructor
DEMOGasSD::~DEMOGasSD(){
}

//////////////////////////////////////////////////////////////////
/// Initializing the DEMOCalGeantHitsCollection object
/// Invoked automatically at the beggining of each event
void DEMOGasSD::Initialize(G4HCofThisEvent* HCE){

  
  hitsCollection = new DEMOGasGeantHitsCollection (SensitiveDetectorName,collectionName[0]);
  static G4int HCID = -1;
  if(HCID<0) HCID = G4SDManager::GetSDMpointer()->GetCollectionID(collectionName[0]);
  
 
  HCE->AddHitsCollection(HCID, hitsCollection );
}

//////////////////////////////////////////////////////////////////
/// Filling the DEMOCalGeantHit information with the step info.
/// Invoked by G4SteppingManager for each step
G4bool DEMOGasSD::ProcessHits(G4Step* aStep,G4TouchableHistory*){

  //To avoid warning messages about removing GetDeltaEnergy, the behaviour of the
  //function is directly implemented here:
  G4double edep = -(aStep->GetPostStepPoint()->GetKineticEnergy() - aStep->GetPreStepPoint()->GetKineticEnergy())/MeV;
  
 //  if(aStep->GetTrack()->GetTrackID()==3 && aStep->GetTrack()->GetParentID()==0){
//      G4cout << " ---- " << G4endl;
//      G4cout << aStep->GetPreStepPoint()->GetPosition().x() << " " << aStep->GetPreStepPoint()->GetPosition().y() << " " << aStep->GetPreStepPoint()->GetPosition().z() << " " << aStep->GetPreStepPoint()->GetKineticEnergy()/MeV << G4endl;
//      G4cout << aStep->GetPostStepPoint()->GetPosition().x() << " " << aStep->GetPostStepPoint()->GetPosition().y() << " " << aStep->GetPostStepPoint()->GetPosition().z() << G4endl;
//      G4cout << aStep->GetStepLength() << " " << edep << G4endl;
//      G4cout << aStep->GetTrack()->GetParticleDefinition()->GetParticleName() << G4endl;
//      if (aStep->GetPostStepPoint()->GetProcessDefinedStep()) G4cout <<  aStep->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName() << G4endl;
//    }
  
  if(edep==0.) return false;

  DEMOGasGeantHit* newHit = new DEMOGasGeantHit();

  newHit->SetTrackID(aStep->GetTrack()->GetTrackID());
  newHit->SetParentID(aStep->GetTrack()->GetParentID());
  
  newHit->SetE0(aStep->GetPreStepPoint()->GetKineticEnergy()/MeV);
  newHit->SetEdep(edep);

  newHit->SetParticleCharge(aStep->GetTrack()->GetDefinition()->GetPDGCharge());
  newHit->SetParticleMass(aStep->GetTrack()->GetDefinition()->GetPDGMass());
  newHit->SetParticleID(aStep->GetTrack()->GetDefinition()->GetPDGEncoding());
  
  newHit->SetPrePos(aStep->GetPreStepPoint()->GetPosition()/mm);
  newHit->SetPostPos(aStep->GetPostStepPoint()->GetPosition()/mm);
  newHit->SetPreToF(aStep->GetPreStepPoint()->GetGlobalTime()/ns);
  newHit->SetPostToF(aStep->GetPostStepPoint()->GetGlobalTime()/ns);
  newHit->SetStepLength(aStep->GetStepLength()/mm);
  newHit->SetStepEnergy(aStep->GetTrack()->GetKineticEnergy()/MeV);

  newHit->SetDetName(aStep->GetTrack()->GetVolume()->GetName());
  newHit->SetDetID(aStep->GetTrack()->GetVolume()->GetCopyNo());
  
  hitsCollection->insert(newHit);

  // newHit cannot be deleted here !
  // It should be deleted after the end of the event

  return true;
}

//////////////////////////////////////////////////////////////////
/// Just prints and draws the event hits (class DEMOGasGeantHit).
/// The recollection of the hits energy deposition in a crystal
/// is done in the DEMOAnalysis::EndOfEventAction()
void DEMOGasSD::EndOfEvent(G4HCofThisEvent*){

  G4int NbHits = hitsCollection->entries();
  if (verboseLevel>0) {
    G4cout << "Hits Collection: in this event they are " << NbHits
	   << " (GEANT-like) hits in the gas volume: " << G4endl;
    for (G4int i=0;i<NbHits;i++) (*hitsCollection)[i]->Print();
  }
  //for (G4int i=0;i<NbHits;i++) (*hitsCollection)[i]->Draw();
}
