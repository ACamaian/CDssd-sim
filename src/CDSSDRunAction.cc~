/// \file DEMORunAction.cc
/// \brief Implementation of the DEMORunAction class

#include "DEMORunAction.hh"
#include "DEMOEventAction.hh"
#include "DEMOAnalysis.hh"

#include "G4RunManager.hh"
#include "G4Run.hh"


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DEMORunAction::DEMORunAction(DEMOEventAction *event)
  : G4UserRunAction(), fEventAction(event)
{ 

  // set printing event number per each event
  G4RunManager::GetRunManager()->SetPrintProgress(1);
  
  // Create analysis manager
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  G4cout << "Using " << analysisManager->GetType() << G4endl;


  // Creating ntuple
  //
  analysisManager->CreateNtuple("DEMOtracks","DEMOtracks");
  analysisManager->CreateNtupleIColumn("ParentIDPos", fEventAction->GetPIDvector());
  analysisManager->CreateNtupleIColumn("TrackIDPos", fEventAction->GetTIDvector());
  analysisManager->CreateNtupleIColumn("PDGPos", fEventAction->GetPDGvector());
  analysisManager->CreateNtupleDColumn("XPos", fEventAction->GetXvector());
  analysisManager->CreateNtupleDColumn("YPos", fEventAction->GetYvector());
  analysisManager->CreateNtupleDColumn("ZPos", fEventAction->GetZvector());
  analysisManager->CreateNtupleDColumn("EdepPos", fEventAction->GetEdepvector());
  analysisManager->CreateNtupleDColumn("E0Pos", fEventAction->GetE0vector());
  analysisManager->FinishNtuple();

  analysisManager->CreateNtuple("DEMOevents","DEMOevents");
  analysisManager->CreateNtupleIColumn("Trackid", fEventAction->GetTrackHit());
  analysisManager->CreateNtupleIColumn("PDGhit", fEventAction->GetPDGhit());
  analysisManager->CreateNtupleIColumn("Volumehit", fEventAction->GetVolumehit());
  analysisManager->CreateNtupleDColumn("E0hit", fEventAction->GetE0hit());
  analysisManager->CreateNtupleDColumn("Edephit", fEventAction->GetEtothit());
  analysisManager->CreateNtupleIColumn("Parenthit", fEventAction->GetParenthit());
  analysisManager->FinishNtuple();

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DEMORunAction::~DEMORunAction()
{
  G4cout << "Deleting Run Action" << G4endl;

  delete G4AnalysisManager::Instance();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DEMORunAction::BeginOfRunAction(const G4Run* aRun)
{ 

    G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();

  const G4int verboseLevel = G4RunManager::GetRunManager()->GetVerboseLevel();
  if(verboseLevel>=2){
    G4cout << "##################################################################"
	   << G4endl
	   << "###########   DEMORunAction::BeginOfRunAction()  ##############"
	   << G4endl
	   << "###    Run " << aRun->GetRunID() << " start." << G4endl;
    G4cout << "##################################################################"
	   << G4endl;
  }
  
  //inform the runManager to save random number seed
  G4RunManager::GetRunManager()->SetRandomNumberStore(true);
  
  // Open an output file
  G4String fileName = "output/ActarDEMO";
  analysisManager->OpenFile(fileName);
  
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DEMORunAction::EndOfRunAction(const G4Run* aRun)
{
  
  // print histogram statistics
  //
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  
  // save histograms & ntuple
  //

  analysisManager->Write();
  analysisManager->CloseFile();
  
  delete analysisManager;

}


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

